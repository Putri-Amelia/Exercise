void deret(int a, int d, int n) {
    int has = (n*(2 * a + (n - 1) * d))/2;
    cout<<has;
}

void baris(int a, int d, int n) {
    int temp = 0;
    for (int i = 1; i <= n; i++) {
        temp = a + (i-1) * d;
        if(temp>=0){
        cout << temp << " ";
        }
        else{
        cout<<"Not Found";
        exit(0);
        }
    }
    cout << endl;
}


#include <iostream>
#include <math.h>
using namespace std;

float jarak(float x[]){
	return sqrt(pow(x[3]-x[0],2) + pow(x[1]-x[2],2));
}

int main(){
	float arr[4];

	for(int i=0; i<4; i++){
		cin>>arr[i];
	}

	cout<<jarak(arr);
}


#include <iostream>
using namespace std;

int main(){
    int matriks1[10][10], matriks2[10][10], hasil[10][10];
    int baris1, kolom1, baris2, kolom2;
    int i, j, k;


    cin >> baris1;

    cin >> kolom1;


    for(i=0; i<baris1; i++){
        for(j=0; j<kolom1; j++){
            cin >> matriks1[i][j];
        }
     }


    cin >> baris2;

    cin >> kolom2;

    if(kolom1 != baris2){
        cout << "Perkalian matriks tidak dapat dilakukan\n";
        return 0;
    }


    for(i=0; i<baris2; i++){
        for(j=0; j<kolom2; j++){
            cin >> matriks2[i][j];
        }
    }

    for(i=0; i<baris1; i++){
        for(j=0; j<kolom2; j++){
            hasil[i][j] = 0;
            for(k=0; k<kolom1; k++){
                hasil[i][j] += matriks1[i][k] * matriks2[k][j];
            }
        }
    }


    for(i=0; i<baris1; i++){
        for(j=0; j<kolom2; j++){
            cout << hasil[i][j] << " ";
        }
        cout << "\n";
    }

    return 0;
}


 void vPtr(void* p, char type)
{
    if (type == 'i')
    {
        for (int i = 0; i < *(int *)p;i++) {
            cout << "ing" << endl;
        }
    }
    else if (type == 'c')
    {
        cout << "ceng " << (char)p << endl;
    }
}
